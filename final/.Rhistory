i<-names(qout)[3]
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
qout
temp
View(temp)
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
}
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
qout
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
}
a<-conf.interval(l)
attributes(a)
position<-"qb"
qout[[position]]
plot(seq(nrow(qout[[position]])),qout[[position]][,4:6])
apply(qout[[position]][,4:6],2,plot,seq(nrow(qout[[position]])))
plot(seq(length(qout[[position]])),qout[[position]][,4])
seq(length(qout[[position]]))
postion<-"qb"
qout[[position]]
seq(length(qout[[position]]))
length(qout[[position]])
plot(seq(nrowqout[[position]])),qout[[position]][,4])
plot(seq(nrow(qout[[position]])),qout[[position]][,4])
plot(seq(nrow(qout[[position]])),qout[[position]][,4],"l")
plot(seq(nrow(qout[[position]])),qout[[position]][,4],"l",xlab="Ranking",ylab="Dollar Value")
plot(seq(nrow(qout[[position]])),qout[[position]][,6],"l",xlab="Ranking",ylab="Dollar Value")
l <- league(x, 10, 200, pos, pnts)
addNoise <- function(l,rv,num,seed){
set.seed(seed)
nos<-vector("list",length(rv))
names(nos)<-names(rv)
results<-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos)
data <- data.frame(matrix(0,nrow=nrow(l$stats),ncol=num))
names(data)<-paste("simulation", 1:num, sep="")
results<-cbind(results,data)
for(n in 1:num){
for(i in names(nos)){
nos[[i]]<-length(which(l$stats$pos==i))
l$stats[which(l$stats$pos==i),names(rv[[i]])]<-l$stats[which(l$stats$pos==i),names(rv[[i]])]+rv[[i]][sample(1:nrow(rv[[i]]),nos[[i]],replace=TRUE,prob=NULL),]
}
l$stats[,sapply(l$stats,is.numeric)][l$stats[,sapply(l$stats,is.numeric)]<0]<-0
l<-league(l$stats,l$nteams,l$cap,l$pos,l$points)
for(i in 1:nrow(lnew$values)){
results[results[,"PlayerName"]==l$values$PlayerName[i],n+3]<-l$values$value[i]
}
}
l$sims<-results
return(l)
}
quantile.league <- function(l,probs=c(0.25, 0.5, 0.75)){
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
quant <- cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
return(quant)
}
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
}
l1 <- addNoise(l, rv, 100)
l1 <- addNoise(l, rv, 100)
addNoise <- function(l,rv,num,seed=100){
set.seed(seed)
nos<-vector("list",length(rv))
names(nos)<-names(rv)
results<-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos)
data <- data.frame(matrix(0,nrow=nrow(l$stats),ncol=num))
names(data)<-paste("simulation", 1:num, sep="")
results<-cbind(results,data)
for(n in 1:num){
for(i in names(nos)){
nos[[i]]<-length(which(l$stats$pos==i))
l$stats[which(l$stats$pos==i),names(rv[[i]])]<-l$stats[which(l$stats$pos==i),names(rv[[i]])]+rv[[i]][sample(1:nrow(rv[[i]]),nos[[i]],replace=TRUE,prob=NULL),]
}
l$stats[,sapply(l$stats,is.numeric)][l$stats[,sapply(l$stats,is.numeric)]<0]<-0
l<-league(l$stats,l$nteams,l$cap,l$pos,l$points)
for(i in 1:nrow(lnew$values)){
results[results[,"PlayerName"]==l$values$PlayerName[i],n+3]<-l$values$value[i]
}
}
l$sims<-results
return(l)
}
quantile.league <- function(l,probs=c(0.25, 0.5, 0.75)){
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
quant <- cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
return(quant)
}
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
}
l1 <- addNoise(l, rv, 100)
l1
quantile(l1)
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
temp<-quantile(l)
l
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
l<- addNoise(l, rv, 100)
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
qout
temp<-quantile(l)
View(temp)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
View(temp)
temp[order(temp[,ncol(temp)], decreasing=TRUE),]
sapply(temp, is.numeric)
class(temp[,6])
temp <- as.numeric(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
temp
t(as.numeric(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
temp
sapply(temp,as.numeric)
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
sapply(temp[,seq(ncol(temp))],as.numeric)
seq(ncol(temp))
c
sapply(temp[,seq(ncol(temp)-1)],as.numeric)
a<-apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))
class(a)
class(a[,1])
View(a)
a<-t(a)
class(a)
class(a[,2])
apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))
a<-apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))
class(a[,2])
t(a)
t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
temp
quantile.league <- function(l,probs=c(0.25, 0.5, 0.75)){
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
quant <- cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
return(quant)
}
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
}
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
quant <- cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
qout
addNoise <- function(l,rv,num,seed=100){
set.seed(seed)
nos<-vector("list",length(rv))
names(nos)<-names(rv)
results<-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos)
data <- data.frame(matrix(0,nrow=nrow(l$stats),ncol=num))
names(data)<-paste("simulation", 1:num, sep="")
results<-cbind(results,data)
for(n in 1:num){
for(i in names(nos)){
nos[[i]]<-length(which(l$stats$pos==i))
l$stats[which(l$stats$pos==i),names(rv[[i]])]<-l$stats[which(l$stats$pos==i),names(rv[[i]])]+rv[[i]][sample(1:nrow(rv[[i]]),nos[[i]],replace=TRUE,prob=NULL),]
}
l$stats[,sapply(l$stats,is.numeric)][l$stats[,sapply(l$stats,is.numeric)]<0]<-0
l<-league(l$stats,l$nteams,l$cap,l$pos,l$points)
for(i in 1:nrow(lnew$values)){
results[results[,"PlayerName"]==l$values$PlayerName[i],n+3]<-l$values$value[i]
}
}
l$sims<-results
return(l)
}
l<- addNoise(l, rv, 100)
temp <- t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75)))
temp
quant <- cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
quant
quant <- data.frame(cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp))
quant
head(quant)
head(X25)
class(quant$X25.)
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
quant <- data.frame(cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp))
class(quant$X25.)
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
quant <-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
quant
class(quant$X25.)
temp
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
names(temp)
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
names(temp)<-c("25%","50%","75%")
quant <-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
quantile.league <- function(l,probs=c(0.25, 0.5, 0.75)){
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
names(temp)<-c("25%","50%","75%")
quant <-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
return(quant)
}
temp<-quantile(l)
temp
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
View(temp)
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
}
class(qout) <- "league.conf.interval"
return(qout)
}
plot(seq(nrow(qout[[position]])),qout[[position]][,6],"l",xlab="Ranking",ylab="Dollar Value")
par(new=TRUE)
plot(seq(nrow(qout[[position]])),qout[[position]][,5],"l",xlab="Ranking",ylab="Dollar Value")
plot(seq(nrow(qout[[position]])),qout[[position]][,5],"l",xlab="Ranking",ylab="Dollar Value",axes=FALSE)
plot(seq(nrow(qout[[position]])),qout[[position]][,6],"l",xlab="Ranking",ylab="Dollar Value")
par(new=TRUE)
plot(seq(nrow(qout[[position]])),qout[[position]][,5],"l",xlab="Ranking",ylab="Dollar Value",axes=FALSE)
plot(lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]))
seq(nrow(qout[[position]]))
qout[[position]][,"25%"]
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
plot(lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]))
plot(c(0,10),c(0,200).
plot(c(0,10),c(0,200),
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]))
qout
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
row.names(qout[[i]])<-NULL
}
class(qout) <- "league.conf.interval"
return(qout)
}
qout<-conf.interval(l)
qout
plot(c(0,10),c(0,200),xlab="Ranking",ylab="Dollar Value"
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]))
plot(c(0,10),c(0,200),xlab="Ranking",ylab="Dollar Value",
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]))
plot(c(0,10),c(0,200),xlab="Ranking",ylab="Dollar Value",
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]),legend(c("25%","50%","75%")))
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"]),lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"]),legend(2000,9.5,c("25%","50%","75%")))
plot(c(0,10),c(0,200),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"])
legend(2000,9.5,c("25%","50%","75%")))
legend(2000,9.5,c("25%","50%","75%"))
plot(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
plot(seq(nrow(qout[[position]])),qout[[position]][,"25%"],"l")
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"])
plot(seq(nrow(qout[[position]])),qout[[position]][,"75%"],"l")
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
plot(c(0,10),c(0,200),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
legend(2000,9.5,c("25%","50%","75%"))
plot(c(0,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"])
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"])
legend(2000,9.5,c("25%","50%","75%"))
legend('topright',c("25%","50%","75%"))
plot(c(0,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=1)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=3)
plot(c(0,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=3)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=1)
legend('topright',c("25%","50%","75%"))
plot(c(1,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value")
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=3)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=1)
legend('topright',c("25%","50%","75%"))
legend('topright',c("25%","50%","75%"),lty=c(3,2,1))
legend('topright',c("25%","50%","75%"),lty=c(1,2,3))
plot(c(1,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value",main=paste(position))
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=3)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=1)
legend('topright',c("25%","50%","75%"),lty=c(1,2,3))
plot(c(1,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value",main=paste("quantile values for",position))
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=3)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=1)
legend('topright',c("25%","50%","75%"),lty=c(1,2,3))
addNoise <- function(l,rv,num,seed=100){
set.seed(seed)
nos<-vector("list",length(rv))
names(nos)<-names(rv)
results<-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos)
data <- data.frame(matrix(0,nrow=nrow(l$stats),ncol=num))
names(data)<-paste("simulation", 1:num, sep="")
results<-cbind(results,data)
for(n in 1:num){
for(i in names(nos)){
nos[[i]]<-length(which(l$stats$pos==i))
l$stats[which(l$stats$pos==i),names(rv[[i]])]<-l$stats[which(l$stats$pos==i),names(rv[[i]])]+rv[[i]][sample(1:nrow(rv[[i]]),nos[[i]],replace=TRUE,prob=NULL),]
}
l$stats[,sapply(l$stats,is.numeric)][l$stats[,sapply(l$stats,is.numeric)]<0]<-0
l<-league(l$stats,l$nteams,l$cap,l$pos,l$points)
for(i in 1:nrow(lnew$values)){
results[results[,"PlayerName"]==l$values$PlayerName[i],n+3]<-l$values$value[i]
}
}
l$sims<-results
return(l)
}
quantile.league <- function(l,probs=c(0.25, 0.5, 0.75)){
temp <- data.frame(t(apply(l$sims[,4:length(l$sims)],1,quantile,probs=c(0.25, 0.5, 0.75))))
names(temp)<-c("25%","50%","75%")
quant <-cbind(PlayerName=l$stats$PlayerName,XTeam=l$stats$XTeam,pos=l$stats$pos,temp)
return(quant)
}
conf.interval <- function(l,probs=c(0.25, 0.5, 0.75)){
temp<-quantile(l)
temp<-temp[order(temp[,ncol(temp)], decreasing=TRUE),]
qout<-vector("list",length=length(l$pos))
names(qout)<-names(l$pos)
for(i in names(qout)){
qout[[i]]<-temp[which(temp[,"pos"]==i)[seq(l$nteams*l$pos[[i]])],]
row.names(qout[[i]])<-NULL
}
class(qout) <- "league.conf.interval"
return(qout)
}
plot.league.conf.interval <- function(qout,position){
plot(c(1,10),c(0,qout[[position]][1,"75%"]+10),xlab="Ranking",ylab="Dollar Value",main=paste("quantile values for",position))
lines(seq(nrow(qout[[position]])),qout[[position]][,"75%"],lty=3)
lines(seq(nrow(qout[[position]])),qout[[position]][,"50%"],lty=2)
lines(seq(nrow(qout[[position]])),qout[[position]][,"25%"],lty=1)
legend('topright',c("25%","50%","75%"),lty=c(1,2,3))
}
calcPoints <- function(lgobj){
lgobj$stats[,"Points"] <- 0
for(i in names(lgobj$points)){
lgobj$stats[,"Points"] <- lgobj$stats[,"Points"]+lgobj$stats[[i]]*lgobj$points[[i]]
}
lgobj$stats <- lgobj$stats[order(lgobj$stats[,'Points'], decreasing=TRUE),][,c("PlayerName","XTeam","pos","Points")]
return(lgobj$stats)
}
buildValues <- function(x2){
x2$fan_pnts <- x2$fan_pnts[order(x2$fan_pnts[,'Points'], decreasing=TRUE),]
ix <- vector('list',length(x2$pos))
names(ix)<-names(x2$pos)
x2$fan_pnts[,'marg']<- NA
for(i in names(ix)){
ix[[i]]<-which(x2$fan_pnts[,'pos']==i)
if(x2$pos[[i]]>0){
x2$fan_pnts[ix[[i]],'marg']<-x2$fan_pnts[ix[[i]],'Points']-x2$fan_pnts[ix[[i]][pos[[i]]*x2$nteams],'Points']
}
}
x3<-x2$fan_pnts[x2$fan_pnts[,'marg'] >= 0 & !is.na(x2$fan_pnts[,'marg']),]
x3 <- x3[order(x3[,'marg'], decreasing=TRUE),]
rownames(x3) <- NULL
x3[,'value'] <- x3[,'marg']*(x2$nteams*x2$cap-nrow(x3))/sum(x3[,'marg']) + 1
x3<-x3[,c('PlayerName', 'XTeam', 'pos', 'Points', 'marg', 'value')]
return(x3)
}
league <- function(stats,nteams,cap,pos,points){
stl <- list(stats,nteams,cap,pos,points)
names(stl)<-c('stats','nteams','cap','pos','points')
stl$fan_pnts <-calcPoints(stl)
stl$values<-buildValues(stl)
stl<-append(stl,list(sims=NULL))
class(stl) <- "league"
return(stl)
}
print.league <- function(x){
cat("The values for players:\n")
print(x$values)
}
plot.league <- function(x){
plot(x$values$value,xlab="Ranking",ylab="Dollar Value")
}
boxplot.league <- function(x){
boxplot(x$values$value~x$values$pos,xlab="position",ylab="Dollar Value")
}
hist.league <- function(x){
hist(x$values$value,main="League Histogram",xlab="Dollar Value",ylab="Frequency")
}
pos <- list(qb=1, rb=2, wr=3, te=1, k=1)
pnts <- list(fg=4, xpt=1, pass_yds=1/25, pass_tds=4, pass_ints=-2,              rush_yds=1/10, rush_tds=6, fumbles=-2, rec_yds=1/20, rec_tds=6)
l <- league(x, 10, 200, pos, pnts)
l
hist(l)
boxplot(l)
plot(l)
pred.pos <- c(k=20, qb=20, rb=40, wr=60, te=20)
noise <- list()
empty <- data.frame(fg=0, fga=0, xpt=0, pass_att=0, pass_cmp=0, pass_yds=0, pass_tds=0, pass_ints=0,
rush_att=0, rush_yds=0, rush_tds=0, fumbles=0, rec_att=0, rec_yds=0, rec_tds=0)
for(i in names(pred.pos)) {
noise[[i]] <- empty[rep(1,pred.pos[i]),]
row.names(noise[[i]]) <- NULL
}
set.seed(35)
noise$k$fg <- rnorm(20, 0, 3)
noise$k$fga <- rnorm(20, 0, 4)
noise$k$xpt <- rnorm(20, 0, 5)
noise$qb$pass_att <- rnorm(20, 0, 25)
noise$qb$pass_cmp <- rnorm(20, 0, 15)
noise$qb$pass_yds <- rnorm(20, 0, 150)
noise$qb$pass_tds <- rnorm(20, 0, 4)
noise$qb$pass_ints <- rnorm(20, 0, 2)
noise$rb$rush_att <- rnorm(40, 0, 40)
noise$rb$rush_yds <- rnorm(40, 0, 200)
noise$rb$rush_tds <- rnorm(40, 0, 2)
noise$rb$fumbles <- rnorm(40, 0, 1)
noise$wr$rec_att <- rnorm(60, 0, 10)
noise$wr$rec_yds <- rnorm(60, 0, 160)
noise$wr$rec_tds <- rnorm(60, 0, 2)
noise$te$rec_att <- rnorm(20, 0, 10)
noise$te$rec_yds <- rnorm(20, 0, 120)
noise$te$rec_tds <- rnorm(20, 0, 2)
l1 <- addNoise(l, noise, 10000)
l1 <- addNoise(l, noise, 100)
quantile(l1)
ci <- conf.interval(l1)
plot(ci, 'qb')
plot(ci, 'rb')
plot(ci, 'wr')
plot(ci, 'te')
plot(ci, 'k')
